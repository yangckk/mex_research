// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: road.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from road.proto</summary>
public static partial class RoadReflection {

  #region Descriptor
  /// <summary>File descriptor for road.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static RoadReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgpyb2FkLnByb3RvIk0KD1Bvc2l0aW9uUmVxdWVzdBIJCgF4GAEgASgCEg0K",
          "BXhfZG90GAIgASgCEg0KBXRoZXRhGAMgASgCEhEKCXRoZXRhX2RvdBgEIAEo",
          "AiIeCg1Qb3NpdGlvblJlcGx5Eg0KBWZvcmNlGAEgASgCMj4KCFBvc2l0aW9u",
          "EjIKDFNlbmRQb3NpdGlvbhIQLlBvc2l0aW9uUmVxdWVzdBoOLlBvc2l0aW9u",
          "UmVwbHkiAGIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PositionRequest), global::PositionRequest.Parser, new[]{ "X", "XDot", "Theta", "ThetaDot" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PositionReply), global::PositionReply.Parser, new[]{ "Force" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// The request containing positional data of block
/// </summary>
public sealed partial class PositionRequest : pb::IMessage<PositionRequest> {
  private static readonly pb::MessageParser<PositionRequest> _parser = new pb::MessageParser<PositionRequest>(() => new PositionRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PositionRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoadReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionRequest(PositionRequest other) : this() {
    x_ = other.x_;
    xDot_ = other.xDot_;
    theta_ = other.theta_;
    thetaDot_ = other.thetaDot_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionRequest Clone() {
    return new PositionRequest(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private float x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "x_dot" field.</summary>
  public const int XDotFieldNumber = 2;
  private float xDot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float XDot {
    get { return xDot_; }
    set {
      xDot_ = value;
    }
  }

  /// <summary>Field number for the "theta" field.</summary>
  public const int ThetaFieldNumber = 3;
  private float theta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Theta {
    get { return theta_; }
    set {
      theta_ = value;
    }
  }

  /// <summary>Field number for the "theta_dot" field.</summary>
  public const int ThetaDotFieldNumber = 4;
  private float thetaDot_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ThetaDot {
    get { return thetaDot_; }
    set {
      thetaDot_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PositionRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PositionRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XDot, other.XDot)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Theta, other.Theta)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ThetaDot, other.ThetaDot)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
    if (XDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XDot);
    if (Theta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Theta);
    if (ThetaDot != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ThetaDot);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(X);
    }
    if (XDot != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(XDot);
    }
    if (Theta != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Theta);
    }
    if (ThetaDot != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(ThetaDot);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0F) {
      size += 1 + 4;
    }
    if (XDot != 0F) {
      size += 1 + 4;
    }
    if (Theta != 0F) {
      size += 1 + 4;
    }
    if (ThetaDot != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PositionRequest other) {
    if (other == null) {
      return;
    }
    if (other.X != 0F) {
      X = other.X;
    }
    if (other.XDot != 0F) {
      XDot = other.XDot;
    }
    if (other.Theta != 0F) {
      Theta = other.Theta;
    }
    if (other.ThetaDot != 0F) {
      ThetaDot = other.ThetaDot;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          X = input.ReadFloat();
          break;
        }
        case 21: {
          XDot = input.ReadFloat();
          break;
        }
        case 29: {
          Theta = input.ReadFloat();
          break;
        }
        case 37: {
          ThetaDot = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Reply containing either left or right
/// </summary>
public sealed partial class PositionReply : pb::IMessage<PositionReply> {
  private static readonly pb::MessageParser<PositionReply> _parser = new pb::MessageParser<PositionReply>(() => new PositionReply());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PositionReply> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::RoadReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionReply() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionReply(PositionReply other) : this() {
    force_ = other.force_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PositionReply Clone() {
    return new PositionReply(this);
  }

  /// <summary>Field number for the "force" field.</summary>
  public const int ForceFieldNumber = 1;
  private float force_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Force {
    get { return force_; }
    set {
      force_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PositionReply);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PositionReply other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Force, other.Force)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Force != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Force);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Force != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(Force);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Force != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PositionReply other) {
    if (other == null) {
      return;
    }
    if (other.Force != 0F) {
      Force = other.Force;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          Force = input.ReadFloat();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
