// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: road.proto

#include "road.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
class PositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRequest> _instance;
} _PositionRequest_default_instance_;
class PositionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionReply> _instance;
} _PositionReply_default_instance_;
static void InitDefaultsscc_info_PositionReply_road_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PositionReply_default_instance_;
    new (ptr) ::PositionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PositionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionReply_road_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PositionReply_road_2eproto}, {}};

static void InitDefaultsscc_info_PositionRequest_road_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_PositionRequest_default_instance_;
    new (ptr) ::PositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::PositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRequest_road_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PositionRequest_road_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_road_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_road_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_road_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_road_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PositionRequest, x_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, y_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, z_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, kp_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, kd_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, ki_),
  PROTOBUF_FIELD_OFFSET(::PositionRequest, clienttime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PositionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::PositionReply, pos_),
  PROTOBUF_FIELD_OFFSET(::PositionReply, actuationforce_),
  PROTOBUF_FIELD_OFFSET(::PositionReply, dtime_),
  PROTOBUF_FIELD_OFFSET(::PositionReply, servertime_),
  PROTOBUF_FIELD_OFFSET(::PositionReply, standarddeviation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::PositionRequest)},
  { 12, -1, sizeof(::PositionReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PositionReply_default_instance_),
};

const char descriptor_table_protodef_road_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nroad.proto\032\037google/protobuf/timestamp."
  "proto\"\206\001\n\017PositionRequest\022\t\n\001x\030\001 \001(\002\022\t\n\001"
  "y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\n\n\002kp\030\004 \001(\002\022\n\n\002kd\030\005 \001"
  "(\002\022\n\n\002ki\030\006 \001(\002\022.\n\nclientTime\030\007 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"r\n\rPositionReply\022"
  "\013\n\003pos\030\001 \001(\t\022\026\n\016actuationForce\030\002 \001(\002\022\r\n\005"
  "dTime\030\003 \001(\003\022\022\n\nserverTime\030\004 \001(\t\022\031\n\021stand"
  "ardDeviation\030\005 \001(\0022>\n\010Position\0222\n\014SendPo"
  "sition\022\020.PositionRequest\032\016.PositionReply"
  "\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_road_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_road_2eproto_sccs[2] = {
  &scc_info_PositionReply_road_2eproto.base,
  &scc_info_PositionRequest_road_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_road_2eproto_once;
static bool descriptor_table_road_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_road_2eproto = {
  &descriptor_table_road_2eproto_initialized, descriptor_table_protodef_road_2eproto, "road.proto", 370,
  &descriptor_table_road_2eproto_once, descriptor_table_road_2eproto_sccs, descriptor_table_road_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_road_2eproto::offsets,
  file_level_metadata_road_2eproto, 2, file_level_enum_descriptors_road_2eproto, file_level_service_descriptors_road_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_road_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_road_2eproto), true);

// ===================================================================

void PositionRequest::InitAsDefaultInstance() {
  ::_PositionRequest_default_instance_._instance.get_mutable()->clienttime_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PositionRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& clienttime(const PositionRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PositionRequest::_Internal::clienttime(const PositionRequest* msg) {
  return *msg->clienttime_;
}
void PositionRequest::clear_clienttime() {
  if (GetArenaNoVirtual() == nullptr && clienttime_ != nullptr) {
    delete clienttime_;
  }
  clienttime_ = nullptr;
}
PositionRequest::PositionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionRequest)
}
PositionRequest::PositionRequest(const PositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clienttime()) {
    clienttime_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.clienttime_);
  } else {
    clienttime_ = nullptr;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&ki_) -
    reinterpret_cast<char*>(&x_)) + sizeof(ki_));
  // @@protoc_insertion_point(copy_constructor:PositionRequest)
}

void PositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRequest_road_2eproto.base);
  ::memset(&clienttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ki_) -
      reinterpret_cast<char*>(&clienttime_)) + sizeof(ki_));
}

PositionRequest::~PositionRequest() {
  // @@protoc_insertion_point(destructor:PositionRequest)
  SharedDtor();
}

void PositionRequest::SharedDtor() {
  if (this != internal_default_instance()) delete clienttime_;
}

void PositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRequest& PositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRequest_road_2eproto.base);
  return *internal_default_instance();
}


void PositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clienttime_ != nullptr) {
    delete clienttime_;
  }
  clienttime_ = nullptr;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ki_) -
      reinterpret_cast<char*>(&x_)) + sizeof(ki_));
  _internal_metadata_.Clear();
}

const char* PositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          kp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          kd_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ki = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ki_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp clientTime = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_clienttime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  // float kp = 4;
  if (!(this->kp() <= 0 && this->kp() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kp(), target);
  }

  // float kd = 5;
  if (!(this->kd() <= 0 && this->kd() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_kd(), target);
  }

  // float ki = 6;
  if (!(this->ki() <= 0 && this->ki() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ki(), target);
  }

  // .google.protobuf.Timestamp clientTime = 7;
  if (this->has_clienttime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::clienttime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionRequest)
  return target;
}

size_t PositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp clientTime = 7;
  if (this->has_clienttime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clienttime_);
  }

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  // float kp = 4;
  if (!(this->kp() <= 0 && this->kp() >= 0)) {
    total_size += 1 + 4;
  }

  // float kd = 5;
  if (!(this->kd() <= 0 && this->kd() >= 0)) {
    total_size += 1 + 4;
  }

  // float ki = 6;
  if (!(this->ki() <= 0 && this->ki() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositionRequest)
    MergeFrom(*source);
  }
}

void PositionRequest::MergeFrom(const PositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clienttime()) {
    _internal_mutable_clienttime()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_clienttime());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.kp() <= 0 && from.kp() >= 0)) {
    _internal_set_kp(from._internal_kp());
  }
  if (!(from.kd() <= 0 && from.kd() >= 0)) {
    _internal_set_kd(from._internal_kd());
  }
  if (!(from.ki() <= 0 && from.ki() >= 0)) {
    _internal_set_ki(from._internal_ki());
  }
}

void PositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRequest::CopyFrom(const PositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRequest::IsInitialized() const {
  return true;
}

void PositionRequest::InternalSwap(PositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clienttime_, other->clienttime_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(kp_, other->kp_);
  swap(kd_, other->kd_);
  swap(ki_, other->ki_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionReply::InitAsDefaultInstance() {
}
class PositionReply::_Internal {
 public:
};

PositionReply::PositionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:PositionReply)
}
PositionReply::PositionReply(const PositionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pos().empty()) {
    pos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pos_);
  }
  servertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_servertime().empty()) {
    servertime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servertime_);
  }
  ::memcpy(&dtime_, &from.dtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&standarddeviation_) -
    reinterpret_cast<char*>(&dtime_)) + sizeof(standarddeviation_));
  // @@protoc_insertion_point(copy_constructor:PositionReply)
}

void PositionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionReply_road_2eproto.base);
  pos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servertime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standarddeviation_) -
      reinterpret_cast<char*>(&dtime_)) + sizeof(standarddeviation_));
}

PositionReply::~PositionReply() {
  // @@protoc_insertion_point(destructor:PositionReply)
  SharedDtor();
}

void PositionReply::SharedDtor() {
  pos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servertime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PositionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionReply& PositionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionReply_road_2eproto.base);
  return *internal_default_instance();
}


void PositionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:PositionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  servertime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&standarddeviation_) -
      reinterpret_cast<char*>(&dtime_)) + sizeof(standarddeviation_));
  _internal_metadata_.Clear();
}

const char* PositionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PositionReply.pos"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float actuationForce = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          actuationforce_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int64 dTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string serverTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_servertime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PositionReply.serverTime"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float standardDeviation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          standarddeviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PositionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pos = 1;
  if (this->pos().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pos().data(), static_cast<int>(this->_internal_pos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PositionReply.pos");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pos(), target);
  }

  // float actuationForce = 2;
  if (!(this->actuationforce() <= 0 && this->actuationforce() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_actuationforce(), target);
  }

  // int64 dTime = 3;
  if (this->dtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_dtime(), target);
  }

  // string serverTime = 4;
  if (this->servertime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servertime().data(), static_cast<int>(this->_internal_servertime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PositionReply.serverTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_servertime(), target);
  }

  // float standardDeviation = 5;
  if (!(this->standarddeviation() <= 0 && this->standarddeviation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_standarddeviation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PositionReply)
  return target;
}

size_t PositionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PositionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pos = 1;
  if (this->pos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pos());
  }

  // string serverTime = 4;
  if (this->servertime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servertime());
  }

  // int64 dTime = 3;
  if (this->dtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dtime());
  }

  // float actuationForce = 2;
  if (!(this->actuationforce() <= 0 && this->actuationforce() >= 0)) {
    total_size += 1 + 4;
  }

  // float standardDeviation = 5;
  if (!(this->standarddeviation() <= 0 && this->standarddeviation() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PositionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PositionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PositionReply)
    MergeFrom(*source);
  }
}

void PositionReply::MergeFrom(const PositionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PositionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pos().size() > 0) {

    pos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pos_);
  }
  if (from.servertime().size() > 0) {

    servertime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.servertime_);
  }
  if (from.dtime() != 0) {
    _internal_set_dtime(from._internal_dtime());
  }
  if (!(from.actuationforce() <= 0 && from.actuationforce() >= 0)) {
    _internal_set_actuationforce(from._internal_actuationforce());
  }
  if (!(from.standarddeviation() <= 0 && from.standarddeviation() >= 0)) {
    _internal_set_standarddeviation(from._internal_standarddeviation());
  }
}

void PositionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PositionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionReply::CopyFrom(const PositionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PositionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionReply::IsInitialized() const {
  return true;
}

void PositionReply::InternalSwap(PositionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pos_.Swap(&other->pos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  servertime_.Swap(&other->servertime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dtime_, other->dtime_);
  swap(actuationforce_, other->actuationforce_);
  swap(standarddeviation_, other->standarddeviation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::PositionRequest* Arena::CreateMaybeMessage< ::PositionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::PositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::PositionReply* Arena::CreateMaybeMessage< ::PositionReply >(Arena* arena) {
  return Arena::CreateInternal< ::PositionReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
