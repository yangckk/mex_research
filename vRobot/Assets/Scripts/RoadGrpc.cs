// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: road.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

public static partial class Position
{
  static readonly string __ServiceName = "Position";

  static readonly grpc::Marshaller<global::PositionRequest> __Marshaller_PositionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PositionRequest.Parser.ParseFrom);
  static readonly grpc::Marshaller<global::PositionReply> __Marshaller_PositionReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::PositionReply.Parser.ParseFrom);

  static readonly grpc::Method<global::PositionRequest, global::PositionReply> __Method_SendPosition = new grpc::Method<global::PositionRequest, global::PositionReply>(
      grpc::MethodType.Unary,
      __ServiceName,
      "SendPosition",
      __Marshaller_PositionRequest,
      __Marshaller_PositionReply);

  /// <summary>Service descriptor</summary>
  public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
  {
    get { return global::RoadReflection.Descriptor.Services[0]; }
  }

  /// <summary>Base class for server-side implementations of Position</summary>
  public abstract partial class PositionBase
  {
    public virtual global::System.Threading.Tasks.Task<global::PositionReply> SendPosition(global::PositionRequest request, grpc::ServerCallContext context)
    {
      throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
    }

  }

  /// <summary>Client for Position</summary>
  public partial class PositionClient : grpc::ClientBase<PositionClient>
  {
    /// <summary>Creates a new client for Position</summary>
    /// <param name="channel">The channel to use to make remote calls.</param>
    public PositionClient(grpc::Channel channel) : base(channel)
    {
    }
    /// <summary>Creates a new client for Position that uses a custom <c>CallInvoker</c>.</summary>
    /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
    public PositionClient(grpc::CallInvoker callInvoker) : base(callInvoker)
    {
    }
    /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
    protected PositionClient() : base()
    {
    }
    /// <summary>Protected constructor to allow creation of configured clients.</summary>
    /// <param name="configuration">The client configuration.</param>
    protected PositionClient(ClientBaseConfiguration configuration) : base(configuration)
    {
    }

    public virtual global::PositionReply SendPosition(global::PositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendPosition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual global::PositionReply SendPosition(global::PositionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.BlockingUnaryCall(__Method_SendPosition, null, options, request);
    }
    public virtual grpc::AsyncUnaryCall<global::PositionReply> SendPositionAsync(global::PositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
    {
      return SendPositionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
    }
    public virtual grpc::AsyncUnaryCall<global::PositionReply> SendPositionAsync(global::PositionRequest request, grpc::CallOptions options)
    {
      return CallInvoker.AsyncUnaryCall(__Method_SendPosition, null, options, request);
    }
    /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
    protected override PositionClient NewInstance(ClientBaseConfiguration configuration)
    {
      return new PositionClient(configuration);
    }
  }

  /// <summary>Creates service definition that can be registered with a server</summary>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static grpc::ServerServiceDefinition BindService(PositionBase serviceImpl)
  {
    return grpc::ServerServiceDefinition.CreateBuilder()
        .AddMethod(__Method_SendPosition, serviceImpl.SendPosition).Build();
  }

  /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
  /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
  /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
  /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
  public static void BindService(grpc::ServiceBinderBase serviceBinder, PositionBase serviceImpl)
  {
    serviceBinder.AddMethod(__Method_SendPosition, serviceImpl.SendPosition);
  }

}
#endregion
